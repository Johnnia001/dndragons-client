{"version":3,"sources":["components/img/sword.gif","components/img/wizardHat.gif","components/img/d202.gif","components/AutoDismissAlert/AutoDismissAlert.js","components/Header/Header.js","apiConfig.js","api/auth.js","components/auth/SignUp.js","components/AutoDismissAlert/messages.js","components/auth/SignIn.js","components/auth/SignOut.js","components/auth/ChangePassword.js","components/Home.js","components/Character/AbilityScore.js","api/character.js","components/Character/Character.js","components/Character/Characters.js","components/Character/CharacterEdit.js","components/Character/CharacterCreate.js","components/Character/SavingProfInsp.js","components/Form.js","App.js","index.js"],"names":["AutoDismissAlert","variant","heading","message","useState","show","setShow","timeoutId","setTimeoutId","console","log","useEffect","id","setTimeout","clearTimeout","Alert","onClose","dismissible","className","Heading","authenticatedOptions","user","to","style","color","unauthenticatedOptions","alwaysOptions","Header","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","email","apiUrls","apiUrl","window","location","hostname","signUp","password","passwordConfirmation","axios","post","credentials","password_confirmation","signIn","signOut","delete","headers","Authorization","token","changePassword","oldPassword","newPassword","patch","passwords","old","new","SignUp","msgAlert","setUser","setEmail","setPassword","setPasswordConfirmation","shouldNavigate","setShouldNavigate","onSignUp","event","a","preventDefault","res","data","Form","onSubmit","Group","controlId","Label","Control","required","type","name","value","placeholder","onChange","target","Button","SignIn","onSignIn","SignOut","clearUser","performSignOut","ChangePassword","setOldPassword","setNewPassword","onChangePassword","src","require","default","Home","AbilityCreate","character","setCharacter","FloatingLabel","label","as","aria-label","strength","dexterity","constitution","intelligence","wisdom","charisma","indexCharacters","get","getOneCharacter","createCharacter","editCharacter","level","exp","charClass","race","alignment","background","prof","savingThrows","charDetails","deleteCharacter","Character","deleted","useParams","fetchData","onDeleteCharacter","then","onClick","Spinner","animation","role","Characters","characters","fetchCharacter","charactersList","map","CharacterEdit","setName","setLevel","setExp","setCharClass","setRace","setAlignment","setBackground","updated","setUpdated","setProf","setStrength","setDexterity","setConstitution","setIntelligence","setWisdom","setCharisma","setSavingThrows","onCharacterEdit","Switch","checked","includes","oldStr","newStr","replace","oldDex","newDex","oldCon","newCon","oldInt","newInt","oldWis","newWis","oldCha","newCha","CharacterCreate","SpiCreate","CharForm","emptyCharacter","page","setPage","Object","assign","onCharacterCreate","FormTitles","disabled","currPage","length","App","msgAlerts","setMsgAlerts","uuid","path","element","appJsx","basename","process","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1a31f90.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sword.7d10d365.gif\";","export default __webpack_public_path__ + \"static/media/wizardHat.b899fd68.gif\";","export default __webpack_public_path__ + \"static/media/d202.e8e23682.gif\";","import React, { useEffect, useState } from 'react'\n\n// We have imported some custom styling for this alert\n// Which will be off-topic, unless extra time at the end of the lesson.\nimport './AutoDismissAlert.scss'\nimport Alert from 'react-bootstrap/Alert'\n\nfunction AutoDismissAlert ({ variant, heading, message }) {\n  // create `show` state. When this is false, the Alert will be hidden from the screen.\n  const [show, setShow] = useState(true)\n  // We are going to create a timer that will stop showing the alert after 5 seconds\n  // We store the timeoutId, incase we need to cancel the timer early (because the AutoDismissAlert was unmounted)\n  const [timeoutId, setTimeoutId] = useState(null)\n  console.log(timeoutId)\n\n  // this will run once, when the component is mounted (added) to the screen\n  // it runs once, because it has an empty dependency array as the second argument\n  useEffect(() => {\n    // We want to create a timer, that closes the alert after 5 seconds (5000 milliseconds)\n    const id = setTimeout(() => setShow(false), 5000)\n    // Keep track of the timeoutId\n    setTimeoutId(id)\n\n    // We want to clean up the timer\n    // this is like componentWillUnmount, it is run whenever the component is unmounted\n    // and its also run before an effect is re-created\n    return function cleanup () {\n      clearTimeout(timeoutId)\n    }\n  }, [])\n\n  return (\n    <Alert\n      /* This is the color, make it the bootstrap passed down as a prop */\n      variant={variant}\n      /* This function sets the show state to false, whenever the x in the top right is clicked. */\n      onClose={() => setShow(false)}\n      /* This adds a close button to our alert */\n      dismissible\n      /* The show property will display the alert if true, and hide it if false. */\n      show={show}\n    >\n      <div className='container'>\n        <Alert.Heading>{heading}</Alert.Heading>\n        <p className='alert-body'>{message}</p>\n      </div>\n    </Alert>\n  )\n}\n\nexport default AutoDismissAlert\n","import React, { Fragment } from 'react'\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\nimport { Link, NavLink } from 'react-router-dom'\n\nconst authenticatedOptions = ({ user }) => {\n  if (user) {\n    return (\n      <Fragment>\n        <NavLink\n          to='/change-password'\n          className='nav-link'\n          style={{ color: 'black' }}\n        >\n          Change Password\n        </NavLink>\n        <NavLink to='/sign-out' className='nav-link' style={{ color: 'black' }}>\n          Sign Out\n        </NavLink>\n        <NavLink\n          to={'/characters'}\n          className='nav-link'\n          style={{ color: 'black' }}\n        >\n          My characters\n        </NavLink>\n        <NavLink\n          to='/characters/create'\n          className='nav-link'\n          style={{ color: 'black' }}\n        >\n          Create Character\n        </NavLink>\n      </Fragment>\n    )\n  }\n}\n\nconst unauthenticatedOptions = (\n  <Fragment>\n    <NavLink to='/sign-up' className='nav-link' style={{ color: 'black' }}>\n      Sign Up\n    </NavLink>\n    <NavLink to='/sign-in' className='nav-link' style={{ color: 'black' }}>\n      Sign In\n    </NavLink>\n  </Fragment>\n)\n\nconst alwaysOptions = (\n  <Fragment>\n    <NavLink to='/' className='nav-link' style={{ color: 'black' }}>\n      Home\n    </NavLink>\n  </Fragment>\n)\n\nconst Header = ({ user }) => (\n  <Navbar variant='dark' expand='md' className='nav'>\n    <Navbar.Brand>\n      <Link to='/' style={{ color: 'black' }}>\n        Critical Characters\n      </Link>\n    </Navbar.Brand>\n    <Navbar.Toggle\n      aria-controls='basic-navbar-nav'\n      style={{ color: 'black' }}\n    />\n    <Navbar.Collapse id='basic-navbar-nav'>\n      <Nav className='ml-auto'>\n        {user && (\n          <span className='navbar-text mr-2' style={{ color: 'black' }}>\n            Welcome, {user.email}\n          </span>\n        )}\n        {alwaysOptions}\n        {user ? authenticatedOptions({ user }) : unauthenticatedOptions}\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n)\n\nexport default Header\n","let apiUrl\nconst apiUrls = {\n  production: 'https://critical-character.herokuapp.com',\n  development: 'http://localhost:8000'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default apiUrl\n","import apiUrl from '../apiConfig'\nimport axios from 'axios'\n\nexport const signUp = (email, password, passwordConfirmation) => {\n  return axios.post(apiUrl + '/sign-up/', {\n    credentials: {\n      email,\n      password,\n      password_confirmation: passwordConfirmation\n    }\n  })\n}\n\nexport const signIn = (email, password) => {\n  return axios.post(apiUrl + '/sign-in/', {\n    credentials: {\n      email,\n      password\n    }\n  })\n}\n\nexport const signOut = user => {\n  return axios.delete(apiUrl + '/sign-out/', {\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\nexport const changePassword = (oldPassword, newPassword, user) => {\n  return axios.patch(\n    apiUrl + '/change-pw/',\n    {\n      passwords: {\n        old: oldPassword,\n        new: newPassword\n      }\n    },\n    {\n      headers: {\n        Authorization: `Token ${user.token}`\n      }\n    }\n  )\n}\n","import React, { useState } from 'react'\nimport { Navigate } from 'react-router-dom'\n\nimport { signUp, signIn } from '../../api/auth'\nimport { signUpSuccess, signUpFailure } from '../AutoDismissAlert/messages'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst SignUp = ({ msgAlert, setUser }) => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [passwordConfirmation, setPasswordConfirmation] = useState('')\n  const [shouldNavigate, setShouldNavigate] = useState(false)\n\n  const onSignUp = async event => {\n    event.preventDefault()\n\n    try {\n      await signUp(email, password, passwordConfirmation)\n      const res = await signIn(email, password)\n      setUser(res.data.user)\n      msgAlert({\n        heading: 'Sign Up Success',\n        message: signUpSuccess,\n        variant: 'success'\n      })\n      setShouldNavigate(true)\n    } catch (error) {\n      setEmail('')\n      setPassword('')\n      setPasswordConfirmation('')\n      msgAlert({\n        heading: 'Sign Up Failed with error: ' + error.message,\n        message: signUpFailure,\n        variant: 'danger'\n      })\n    }\n  }\n\n  if (shouldNavigate) {\n    return <Navigate to='/' />\n  }\n\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Sign Up</h3>\n        <Form onSubmit={onSignUp}>\n          <Form.Group controlId='email'>\n            <Form.Label className='label'>Email address</Form.Label>\n            <Form.Control\n              required\n              type='email'\n              name='email'\n              value={email}\n              placeholder='Enter email'\n              onChange={event => setEmail(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group controlId='password'>\n            <Form.Label className='label'>Password</Form.Label>\n            <Form.Control\n              required\n              name='password'\n              value={password}\n              type='password'\n              placeholder='Password'\n              onChange={event => setPassword(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group controlId='passwordConfirmation'>\n            <Form.Label className='label'>Password Confirmation</Form.Label>\n            <Form.Control\n              required\n              name='passwordConfirmation'\n              value={passwordConfirmation}\n              type='password'\n              placeholder='Confirm Password'\n              onChange={event => setPasswordConfirmation(event.target.value)}\n            />\n          </Form.Group>\n          <Button className='start-btn' type='submit'>\n            Submit\n          </Button>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\nexport default SignUp\n","export const signUpSuccess =\n  'Succesfully registered! Youve been signed in as well.'\nexport const signUpFailure =\n  'Registration failed. Email may be taken, or passwords dont match.'\nexport const signInSuccess = 'Welcome!'\nexport const signInFailure =\n  'Failed to sign in. Check your email and password and try again.'\nexport const signOutSuccess = 'Take a long rest!'\nexport const changePasswordSuccess = 'Password changed successfully!'\nexport const changePasswordFailure =\n  'Failed to change passwords. Check your old password and try again.'\nexport const characterCreateSuccess =\n  'Character created successfully! Roll for initiative!'\nexport const characterCreateFailure =\n  'Failed to create a character. Please check your inputs and try again.'\nexport const characterEditSuccess =\n  'Character successfully updated! Roll for initiative!'\nexport const characterEditFailure =\n  'Failed to update your character. Please check inputs and try again.'\nexport const characterDeleteSuccess =\n  'Character successfully deleted. Sad to see you go!'\nexport const characterFindError =\n  'Uh oh. We couldnt find the character you were looking for'\n","import React, { useState } from 'react'\nimport { Navigate } from 'react-router-dom'\n\nimport { signIn } from '../../api/auth'\nimport { signInSuccess, signInFailure } from '../AutoDismissAlert/messages'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst SignIn = ({ msgAlert, setUser }) => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [shouldNavigate, setShouldNavigate] = useState(false)\n\n  const onSignIn = async event => {\n    event.preventDefault()\n\n    try {\n      const res = await signIn(email, password)\n      setUser(res.data.user)\n\n      msgAlert({\n        heading: 'Sign In Success',\n        message: signInSuccess,\n        variant: 'success'\n      })\n      setShouldNavigate(true)\n    } catch (error) {\n      setEmail('')\n      setPassword('')\n      msgAlert({\n        heading: 'Sign In Failed with error: ' + error.message,\n        message: signInFailure,\n        variant: 'danger'\n      })\n    }\n  }\n\n  if (shouldNavigate) {\n    return <Navigate to='/' />\n  }\n\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Sign In</h3>\n        <Form onSubmit={onSignIn}>\n          <Form.Group controlId='email'>\n            <Form.Label className='label'>Email address</Form.Label>\n            <Form.Control\n              required\n              type='email'\n              name='email'\n              value={email}\n              placeholder='Enter email'\n              onChange={event => setEmail(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group controlId='password'>\n            <Form.Label className='label'>Password</Form.Label>\n            <Form.Control\n              className= 'input'\n              required\n              name='password'\n              value={password}\n              type='password'\n              placeholder='Password'\n              onChange={event => setPassword(event.target.value)}\n            />\n          </Form.Group>\n          <Button className='start-btn' type='submit'>\n            Submit\n          </Button>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\nexport default SignIn\n","import React, { useState, useEffect } from 'react'\nimport { Navigate } from 'react-router-dom'\n\nimport { signOut } from '../../api/auth'\nimport { signOutSuccess } from '../AutoDismissAlert/messages'\n\nconst SignOut = ({ msgAlert, clearUser, user }) => {\n  const [shouldNavigate, setShouldNavigate] = useState(false)\n\n  // this is like componentDidMount, it will run whenever the SignOut component\n  // is mounted (or added) to the page\n  useEffect(() => {\n  // for performance reasons, when using `useEffect`\n  // it's a best practice to create a helper function w/ async/await\n    const performSignOut = async () => {\n    // make a signOut axios request\n      await signOut(user)\n\n      msgAlert({\n        heading: 'Signed Out Successfully',\n        message: signOutSuccess,\n        variant: 'success'\n      })\n\n      // reset the user back to its initial value\n      clearUser()\n      setShouldNavigate(true)\n    }\n    performSignOut()\n  }, [])\n\n  if (!user || shouldNavigate) {\n    return <Navigate to='/' />\n  }\n\n  return ''\n}\n\nexport default SignOut\n","import React, { useState } from 'react'\nimport { Navigate } from 'react-router-dom'\n\nimport { changePassword } from '../../api/auth'\nimport {\n  changePasswordSuccess,\n  changePasswordFailure\n} from '../AutoDismissAlert/messages'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst ChangePassword = ({ msgAlert, user }) => {\n  const [oldPassword, setOldPassword] = useState('')\n  const [newPassword, setNewPassword] = useState('')\n  const [shouldNavigate, setShouldNavigate] = useState(false)\n\n  const onChangePassword = async event => {\n    event.preventDefault()\n\n    try {\n      await changePassword(oldPassword, newPassword, user)\n      msgAlert({\n        heading: 'Change Password Success',\n        message: changePasswordSuccess,\n        variant: 'success'\n      })\n      setShouldNavigate(true)\n    } catch (error) {\n      setOldPassword('')\n      setNewPassword('')\n      msgAlert({\n        heading: 'Change Password Failed with error: ' + error.message,\n        message: changePasswordFailure,\n        variant: 'danger'\n      })\n    }\n  }\n\n  if (!user || shouldNavigate) {\n    return <Navigate to='/' />\n  }\n\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Change Password</h3>;\n        <div className='w-sword'>\n          <img className='sword' src={require('../img/sword.gif').default} />\n        </div>\n        <Form onSubmit={onChangePassword}>\n          <Form.Group controlId='oldPassword'>\n            <Form.Label className='label'>Old password</Form.Label>\n            <Form.Control\n              required\n              name='oldPassword'\n              value={oldPassword}\n              type='password'\n              placeholder='Old Password'\n              onChange={event => setOldPassword(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group controlId='newPassword'>\n            <Form.Label className='label'>New Password</Form.Label>\n            <Form.Control\n              required\n              name='newPassword'\n              value={newPassword}\n              type='password'\n              placeholder='New Password'\n              onChange={event => setNewPassword(event.target.value)}\n            />\n          </Form.Group>\n          <Button className='start-btn' type='submit'>\n            Submit\n          </Button>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\nexport default ChangePassword\n","import React from 'react'\nimport './Home.scss'\n\nconst Home = () => {\n  return (\n    <>\n      <div className='title'>\n        <h1>Critical Characters</h1>\n        <br />\n        <p>\n          Build Your Role Play characters and keep them online so they are\n          always with you.\n        </p>\n        <br />\n        <div className='w-hat'>\n          <img className='hat' src={require('./img/wizardHat.gif').default} />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Home\n","import React from 'react'\n\nimport Form from 'react-bootstrap/Form'\nimport FloatingLabel from 'react-bootstrap/FloatingLabel'\n\nconst AbilityCreate = ({ character, setCharacter }) => {\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Ability Scores</h3>\n        <p>\n          Your character’s ability scores represent how well your character\n          performs in six distinct areas\n        </p>\n\n        <Form>\n          <FloatingLabel\n            controlId='floatingSelectGrid'\n            label='Strength'\n          >\n            <Form.Control\n              as='select'\n              type='strength'\n              aria-label='Alignment'\n              required\n              value={character.strength}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  strength: event.target.value\n                }))\n              }\n            >\n              <option className='label'>Strength</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n\n          <Form>\n            <FloatingLabel controlId='floatingSelectGrid' label='Dexterity'>\n              <Form.Control\n                as='select'\n                type='dexterity'\n                aria-label='Alignment'\n                required\n                value={character.dexterity}\n                onChange={event =>\n                  setCharacter(character => ({\n                    ...character,\n                    dexterity: event.target.value\n                  }))\n                }\n              >\n                <option>Dexterity</option>\n                <option value='Ability Score: 2-3 Modifier: -4'>\n                  Ability Score: 2-3 Modifier: -4\n                </option>\n                <option value='Ability Score: 4-5 Modifier: -3'>\n                  Ability Score: 4-5 Modifier: -3\n                </option>\n                <option value='Ability Score: 6-7 Modifier: -2'>\n                  Ability Score: 6-7 Modifier: -2\n                </option>\n                <option value='Ability Score: 8-9 Modifier: -1'>\n                  Ability Score: 8-9 Modifier: -1\n                </option>\n                <option value='Ability Score: 10-11 Modifier: +0'>\n                  Ability Score: 10-11 Modifier: +0\n                </option>\n                <option value='Ability Score: 12-13 Modifier: +1'>\n                  Ability Score:Ability Score: 12-13 Modifier: +1\n                </option>\n                <option value='Ability Score: 14-15 Modifier: +2'>\n                  Ability Score: 14-15 Modifier: +2\n                </option>\n                <option value='Ability Score: 16-17 Modifier: +3'>\n                  Ability Score: 16-17 Modifier: +3\n                </option>\n                <option value='Ability Score: 18-19 Modifier: +4'>\n                  Ability Score: 18-19 Modifier: +4\n                </option>\n                <option value='Ability Score: 20+ Modifier: +5'>\n                  Ability Score: 20+ Modifier: +5\n                </option>\n              </Form.Control>\n            </FloatingLabel>\n          </Form>\n        </Form>\n\n        <Form>\n          <FloatingLabel controlId='floatingSelectGrid' label='Constitution'>\n            <Form.Control\n              as='select'\n              type='constitution'\n              aria-label='Alignment'\n              required\n              value={character.constitution}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  constitution: event.target.value\n                }))\n              }\n            >\n              <option>Constitution</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n        </Form>\n\n        <Form>\n          <FloatingLabel controlId='floatingSelectGrid' label='Intelligence'>\n            <Form.Control\n              as='select'\n              type='intelligence'\n              aria-label='Alignment'\n              required\n              value={character.intelligence}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  intelligence: event.target.value\n                }))\n              }\n            >\n              <option>Intelligence</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n        </Form>\n        <Form>\n          <FloatingLabel controlId='floatingSelectGrid' label='Wisdom'>\n            <Form.Control\n              as='select'\n              type='wisdom'\n              aria-label='Alignment'\n              required\n              value={character.wisdom}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  wisdom: event.target.value\n                }))\n              }\n            >\n              <option>Wisdom</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n        </Form>\n\n        <Form>\n          <FloatingLabel controlId='floatingSelectGrid' label='Charisma'>\n            <Form.Control\n              as='select'\n              type='charisma'\n              aria-label='Alignment'\n              required\n              value={character.charisma}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  charisma: event.target.value\n                }))\n              }\n            >\n              <option>Charisma</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\nexport default AbilityCreate\n","import axios from 'axios'\nimport apiUrl from '../apiConfig'\n\nexport const indexCharacters = user => {\n  return axios.get(apiUrl + '/characters/', {\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\nexport const getOneCharacter = (id, user) => {\n  return axios.get(`${apiUrl}/characters/${id}/`, {\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\nexport const createCharacter = (user, character) => {\n  return axios.post(\n    `${apiUrl}/characters/create/`,\n    {\n      character\n    },\n\n    {\n      headers: {\n        Authorization: `Token ${user.token}`\n      }\n    }\n  )\n}\n\nexport const editCharacter = (\n  user,\n  id,\n  name,\n  level,\n  exp,\n  charClass,\n  race,\n  alignment,\n  background,\n  strength,\n  dexterity,\n  constitution,\n  intelligence,\n  wisdom,\n  charisma,\n  prof,\n  savingThrows\n) => {\n  const charDetails = {\n    user,\n    savingThrows\n  }\n  // If no changes made it keeps previous value :)\n  if (name !== '') {\n    charDetails.name = name\n  }\n  if (level !== '') {\n    charDetails.level = level\n  }\n  if (exp !== '') {\n    charDetails.exp = exp\n  }\n  if (charClass !== '') {\n    charDetails.charClass = charClass\n  }\n  if (race !== '') {\n    charDetails.race = race\n  }\n  if (alignment !== '') {\n    charDetails.alignment = alignment\n  }\n  if (background !== '') {\n    charDetails.background = background\n  }\n  if (strength !== '') {\n    charDetails.strength = strength\n  }\n  if (dexterity !== '') {\n    charDetails.dexterity = dexterity\n  }\n  if (constitution !== '') {\n    charDetails.constitution = constitution\n  }\n  if (intelligence !== '') {\n    charDetails.intelligence = intelligence\n  }\n  if (wisdom !== '') {\n    charDetails.wisdom = wisdom\n  }\n  if (charisma !== '') {\n    charDetails.charisma = charisma\n  }\n  if (prof !== '') {\n    charDetails.prof = prof\n  }\n\n  return axios.patch(\n    `${apiUrl}/characters/${id}/`,\n    {\n      character: charDetails\n    },\n    {\n      headers: {\n        Authorization: `Token ${user.token}`\n      }\n    }\n  )\n}\n\nexport const deleteCharacter = (user, id) => {\n  return axios.delete(`${apiUrl}/characters/${id}`, {\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n","import React, { useState, useEffect } from 'react'\nimport { Link, Navigate, useParams } from 'react-router-dom'\nimport { Spinner, Button } from 'react-bootstrap'\n\nimport { deleteCharacter, getOneCharacter } from '../../api/character'\nimport { characterDeleteSuccess } from '../AutoDismissAlert/messages'\n\nconst Character = ({ user, msgAlert }) => {\n  const [character, setCharacter] = useState(null)\n  const [deleted] = useState(false)\n  const { id } = useParams()\n  const [shouldNavigate, setShouldNavigate] = useState(false)\n\n  // if user is null, redirect to home page\n  // Note: Must check before useEffect, since it needs user\n  if (!user) {\n    return <Navigate to='/' />\n  }\n\n  useEffect(() => {\n    // When using async & await in a `useEffect` function\n    // We have to wrap our `async` code in a function:\n    // https://stackoverflow.com/a/53572588\n    const fetchData = async () => {\n      try {\n        const res = await getOneCharacter(id, user)\n        setCharacter(res.data.character)\n      } catch (error) {\n        msgAlert({\n          heading: 'Character failed to load',\n          message: error.message,\n          variant: 'danger'\n        })\n      }\n    }\n    fetchData()\n  }, [])\n\n  const onDeleteCharacter = async () => {\n    try {\n      await deleteCharacter(user, id).then(\n        delete user.character,\n        setShouldNavigate(true),\n        msgAlert({\n          heading: 'Character Deleted Successfully',\n          message: characterDeleteSuccess,\n          variant: 'success'\n        })\n      )\n    } catch (error) {\n      msgAlert({\n        heading: 'Delete Character failed with error: ',\n        message: error.message,\n        variant: 'danger'\n      })\n    }\n  }\n\n  if (shouldNavigate) {\n    return <Navigate to='/' />\n  }\n\n  // 3 states:\n  // If character is `null`, we are loading\n  if (!character) {\n    return (\n      <Spinner animation='border' role='status'>\n        <span className='visually-hidden'>Loading...</span>\n      </Spinner>\n    )\n  } else if (deleted) {\n    return <Navigate to='/characters' />\n  } else {\n    // We have a character, display it!\n    return (\n      <div className='row'>\n        <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n          <h2>{character.name}</h2>\n          <p>Level: {character.level}</p>\n          <p>EXP:{character.exp}</p>\n          <p>{character.charClass}</p>\n          <p>{character.race}</p>\n          <p>{character.alignment}</p>\n          <p>{character.background}</p>\n          <p>Ability Scores</p>\n          <p>Strength: {character.strength}</p>\n          <p>Dexterity: {character.dexterity}</p>\n          <p>Constitution: {character.constitution}</p>\n          <p>Intelligence: {character.intelligence}</p>\n          <p>Wisdom: {character.wisdom}</p>\n          <p>Charisma: {character.charisma}</p>\n          <p>Proficiency: {character.prof}</p>\n          <p>Saving Throws:{character.savingThrows}</p>\n\n          <Button\n            className='start-btn'\n            onClick={onDeleteCharacter}\n          >\n            Delete Character\n          </Button>\n          <Link to={`/characters/${id}/edit`}>\n            <Button className='start-btn' type='submit'>\n              Update Character\n            </Button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Character\n","import React, { useState, useEffect } from 'react'\nimport { Navigate, Link } from 'react-router-dom'\nimport { indexCharacters } from '../../api/character'\nimport { Spinner } from 'react-bootstrap'\n\nimport Button from 'react-bootstrap/Button'\nimport { characterFindError } from '../AutoDismissAlert/messages'\n\nconst Characters = ({ user, msgAlert }) => {\n  const [characters, setCharacter] = useState(null)\n  const [shouldNavigate, setShouldNavigate] = useState(false)\n\n  if (!user) {\n    return <Navigate to='/' />\n  }\n\n  useEffect(() => {\n    const fetchCharacter = async () => {\n      try {\n        await indexCharacters(user).then(res =>\n          setCharacter(res.data.characters)\n        )\n      } catch (error) {\n        msgAlert({\n          heading: 'Finding Character failed with error: ',\n          message: characterFindError,\n          variant: 'danger'\n        })\n      }\n    }\n    fetchCharacter()\n  }, [])\n\n  if (shouldNavigate) {\n    return <Navigate to='/' />\n  }\n\n  if (characters === null) {\n    return (\n      <>\n        <h4>Fetching Character</h4>\n        <Spinner animation='border' role='status'>\n          <span className='visually-hidden'>Loading...</span>\n        </Spinner>\n        <Button\n          onClick={() => setShouldNavigate(true)}\n          variant='primary'\n          type='button'\n        >\n          Return Home\n        </Button>\n      </>\n    )\n  } else {\n    const charactersList = characters.map(character => (\n      <li key={character.id}>\n        <Link to={`/characters/${character.id}`}>{character.name}</Link>\n      </li>\n    ))\n    return (\n      <>\n        <h1>Characters</h1>\n        <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n          <ul>{charactersList}</ul>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Characters\n","import React, { useState, useEffect } from 'react'\nimport { Navigate, useParams } from 'react-router-dom'\nimport { editCharacter, getOneCharacter } from '../../api/character'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport {\n  characterEditSuccess,\n  characterEditFailure\n} from '../AutoDismissAlert/messages'\nimport FloatingLabel from 'react-bootstrap/FloatingLabel'\n\nconst CharacterEdit = ({ user, msgAlert }) => {\n  const [name, setName] = useState('')\n  const [level, setLevel] = useState('')\n  const [exp, setExp] = useState('')\n  const [charClass, setCharClass] = useState('')\n  const [race, setRace] = useState('')\n  const [alignment, setAlignment] = useState('')\n  const [background, setBackground] = useState('')\n  const [updated, setUpdated] = useState(false)\n  const { id } = useParams()\n  const [character, setCharacter] = useState({})\n  const [prof, setProf] = useState('')\n  const [strength, setStrength] = useState('')\n  const [dexterity, setDexterity] = useState('')\n  const [constitution, setConstitution] = useState('')\n  const [intelligence, setIntelligence] = useState('')\n  const [wisdom, setWisdom] = useState('')\n  const [charisma, setCharisma] = useState('')\n  const [savingThrows, setSavingThrows] = useState(\n    '-STR -DEX -CON -INT -WIS -CHA'\n  )\n\n  if (!user) {\n    return <Navigate to='/' />\n  }\n  useEffect(() => {\n    // When using async & await in a `useEffect` function\n    // We have to wrap our `async` code in a function:\n    // https://stackoverflow.com/a/53572588\n    const fetchData = async () => {\n      try {\n        const res = await getOneCharacter(id, user)\n        setCharacter(res.data.character)\n        setName(character.name)\n      } catch (error) {\n        msgAlert({\n          heading: 'Character failed to load',\n          message: error.message,\n          variant: 'danger'\n        })\n      }\n    }\n    fetchData()\n  }, [])\n\n  const onCharacterEdit = async event => {\n    event.preventDefault()\n\n    try {\n      await editCharacter(\n        user,\n        id,\n        name,\n        level,\n        exp,\n        charClass,\n        race,\n        alignment,\n        background,\n        strength,\n        dexterity,\n        constitution,\n        intelligence,\n        wisdom,\n        charisma,\n        prof,\n        savingThrows\n      )\n      msgAlert({\n        heading: 'Character Edit Success',\n        message: characterEditSuccess,\n        variant: 'success'\n      })\n      setUpdated(true)\n    } catch (error) {\n      msgAlert({\n        heading: 'Character Edit failed with error: ' + error.message,\n        message: characterEditFailure,\n        variant: 'danger'\n      })\n      setName('')\n      setLevel('')\n      setExp('')\n      setCharClass('')\n      setRace('')\n      setAlignment('')\n      setBackground('')\n      setStrength('')\n      setDexterity('')\n      setConstitution('')\n      setIntelligence('')\n      setWisdom('')\n      setCharisma('')\n      setProf('')\n      setSavingThrows('-STR -DEX -CON -INT -WIS -CHA')\n    }\n  }\n\n  if (updated) {\n    return <Navigate to={`/characters/${id}`} />\n  }\n\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h2>Edit Your Character</h2>\n        {/* CHARACTER INFO   */}\n        <br />\n        <h4>Character Info</h4>\n        <Form onSubmit={onCharacterEdit}>\n          <Form.Group className='mb-3' controlId='name'>\n            <Form.Label className='label'>Name</Form.Label>\n            <Form.Control\n              type='name'\n              name='name'\n              placeholder={character.name}\n              value={name}\n              onChange={event => setName(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group className='mb-4' controlId='level'>\n            <Form.Label className='label'>Level</Form.Label>\n            <Form.Control\n              value={level}\n              name='level'\n              type='level'\n              placeholder={character.level}\n              onChange={event => setLevel(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group className='mb-4' controlId='exp'>\n            <Form.Label className='label'>Experience Points</Form.Label>\n            <Form.Control\n              value={exp}\n              name='exp'\n              type='exp'\n              placeholder={character.exp}\n              onChange={event => setExp(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Control\n            aria-label='charClass'\n            as='select'\n            name='charClass'\n            value={charClass}\n            type='charClass'\n            onChange={event => setCharClass(event.target.value)}\n          >\n            <option>{character.charClass}</option>\n            <option value='Artificer'>Artificer</option>\n            <option value='Barbarian'>Barbarian</option>\n            <option value='Bard'>Bard</option>\n            <option value='Blood Hunter'>Blood Hunter</option>\n            <option value='Cleric'>Cleric</option>\n            <option value='Druid'>Druid</option>\n            <option value='Fighter'>Fighter</option>\n            <option value='Monk'>Monk</option>\n            <option value='Paladin'>Paladin</option>\n            <option value='Ranger'>Ranger</option>\n            <option value='Rogue'>Rogue</option>\n            <option value='Sorcerer'>Sorcerer</option>\n            <option value='Warlock'>Warlock</option>\n            <option value='Wizard'>Wizard</option>\n          </Form.Control>\n          <Form.Control\n            aria-label='Race'\n            as='select'\n            name='race'\n            value={race}\n            type='race'\n            onChange={event => setRace(event.target.value)}\n          >\n            <option>{character.race}</option>\n            <option value='Dragon Born'>Dragon Born</option>\n            <option value='Dwarf'>Dwarf</option>\n            <option value='Elf'>Elf</option>\n            <option value='Gnome'>Gnome</option>\n            <option value='Half Elf'>Half Elf</option>\n            <option value='Halfling'>Halfling</option>\n            <option value='Half-Orc'>Half-Orc</option>\n            <option value='Human'>Human</option>\n            <option value='Tiefling'>Tiefling</option>\n          </Form.Control>\n          <Form.Control\n            as='select'\n            name='alignment'\n            value={alignment}\n            type='alignment'\n            onChange={event => setAlignment(event.target.value)}\n            aria-label='Alignment'\n          >\n            <option>{character.alignment}</option>\n            <option value='Lawful Good'>Lawful Good</option>\n            <option value='Neutral Good'>Neutral Good</option>\n            <option value='Chaotic Good'>Chaotic Good</option>\n            <option value='Lawful Neutral'>Lawful Neutral</option>\n            <option value='True Neutral'>True Neutral</option>\n            <option value='Chaotic Neutral'>Chaotic Neutral</option>\n            <option value='Lawful Evil'>Lawful Evil</option>\n            <option value='Neutral Evil'>Neutral EVil</option>\n            <option value='Chaotic Evil'>Chaotic Evil</option>\n            <option value='Unaligned'>Unaligned</option>\n          </Form.Control>\n          <Form.Group className='mb-4' controlId='background'>\n            <Form.Label className='label'>Background</Form.Label>\n            <Form.Control\n              value={background}\n              name='background'\n              type='background'\n              placeholder={character.background}\n              onChange={event => setBackground(event.target.value)}\n            />\n          </Form.Group>\n          <Button className='start-btn' type='submit'>\n            Submit\n          </Button>\n          <br />\n\n          {/*  ABILITY SCORES   */}\n\n          <h4>Ability Scores</h4>\n          <FloatingLabel\n            className = 'label'\n            controlId='floatingSelectGrid'\n            label='Strength'\n          >\n            <Form.Control\n              as='select'\n              type='strength'\n              aria-label='Alignment'\n              required\n              value={character.strength}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  strength: event.target.value\n                }))\n              }\n            >\n              <option>Strength</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n          <FloatingLabel\n            className='label'\n            controlId='floatingSelectGrid'\n            label='Dexterity'\n          >\n            <Form.Control\n              as='select'\n              type='dexterity'\n              aria-label='Alignment'\n              required\n              value={character.dexterity}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  dexterity: event.target.value\n                }))\n              }\n            >\n              <option>Dexterity</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n          <FloatingLabel\n            className='label'\n            controlId='floatingSelectGrid'\n            label='Constitution'\n          >\n            <Form.Control\n              as='select'\n              type='constitution'\n              aria-label='Alignment'\n              required\n              value={character.constitution}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  constitution: event.target.value\n                }))\n              }\n            >\n              <option>Constitution</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n          <FloatingLabel\n            className='label'\n            controlId='floatingSelectGrid'\n            label='Intelligence'\n          >\n            <Form.Control\n              as='select'\n              type='intelligence'\n              aria-label='Alignment'\n              required\n              value={character.intelligence}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  intelligence: event.target.value\n                }))\n              }\n            >\n              <option>Intelligence</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n          <FloatingLabel controlId='floatingSelectGrid' label='Wisdom'>\n            <Form.Control\n              as='select'\n              type='wisdom'\n              aria-label='Alignment'\n              required\n              value={character.wisdom}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  wisdom: event.target.value\n                }))\n              }\n            >\n              <option>Wisdom</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n          <FloatingLabel\n            className='label'\n            controlId='floatingSelectGrid'\n            label='Charisma'\n          >\n            <Form.Control\n              as='select'\n              type='charisma'\n              aria-label='Alignment'\n              required\n              value={character.charisma}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  charisma: event.target.value\n                }))\n              }\n            >\n              <option>Charisma</option>\n              <option value='Ability Score: 2-3 Modifier: -4'>\n                Ability Score: 2-3 Modifier: -4\n              </option>\n              <option value='Ability Score: 4-5 Modifier: -3'>\n                Ability Score: 4-5 Modifier: -3\n              </option>\n              <option value='Ability Score: 6-7 Modifier: -2'>\n                Ability Score: 6-7 Modifier: -2\n              </option>\n              <option value='Ability Score: 8-9 Modifier: -1'>\n                Ability Score: 8-9 Modifier: -1\n              </option>\n              <option value='Ability Score: 10-11 Modifier: +0'>\n                Ability Score: 10-11 Modifier: +0\n              </option>\n              <option value='Ability Score: 12-13 Modifier: +1'>\n                Ability Score:Ability Score: 12-13 Modifier: +1\n              </option>\n              <option value='Ability Score: 14-15 Modifier: +2'>\n                Ability Score: 14-15 Modifier: +2\n              </option>\n              <option value='Ability Score: 16-17 Modifier: +3'>\n                Ability Score: 16-17 Modifier: +3\n              </option>\n              <option value='Ability Score: 18-19 Modifier: +4'>\n                Ability Score: 18-19 Modifier: +4\n              </option>\n              <option value='Ability Score: 20+ Modifier: +5'>\n                Ability Score: 20+ Modifier: +5\n              </option>\n            </Form.Control>\n          </FloatingLabel>\n          <Button className='start-btn' type='submit'>\n            Submit\n          </Button>\n          <br />\n\n          {/* PROFICIENCY  SAVING THROWS   */}\n          <h4>Proficiency</h4>\n          <Form.Group className='mb-4' controlId='prof'>\n            <Form.Label className='label'>Proficiency Bonus</Form.Label>\n            <Form.Control\n              value={prof}\n              name='prof'\n              type='prof'\n              placeholder='Proficiency Bonus'\n              onChange={event => setProf(event.target.value)}\n            />\n          </Form.Group>\n\n          <h4>Saving Throws</h4>\n          <Form.Label className='label'>Saving Throws</Form.Label>\n          <Form.Switch\n            className='label'\n            type='switch'\n            name='strength'\n            label='strength'\n            checked={savingThrows.includes('+STR')}\n            onChange={event => {\n              const [oldStr, newStr] = event.target.checked\n                ? ['-STR', '+STR']\n                : ['+STR', '-STR']\n              setSavingThrows(savingThrows.replace(oldStr, newStr))\n            }}\n          />\n          <Form.Switch\n            className='label'\n            type='switch'\n            name='dexterity'\n            label='dexterity'\n            checked={savingThrows.includes('+DEX')}\n            onChange={event => {\n              const [oldDex, newDex] = event.target.checked\n                ? ['-DEX', '+DEX']\n                : ['+DEX', '-DEX']\n              setSavingThrows(savingThrows.replace(oldDex, newDex))\n            }}\n          />\n          <Form.Switch\n            className='label'\n            type='switch'\n            name='constitution'\n            label='constitution'\n            checked={savingThrows.includes('+CON')}\n            onChange={event => {\n              const [oldCon, newCon] = event.target.checked\n                ? ['-CON', '+CON']\n                : ['+CON', '-CON']\n              setSavingThrows(savingThrows.replace(oldCon, newCon))\n            }}\n          />\n          <Form.Switch\n            className='label'\n            type='switch'\n            name='intelligence'\n            label='intelligence'\n            checked={savingThrows.includes('+INT')}\n            onChange={event => {\n              const [oldInt, newInt] = event.target.checked\n                ? ['-INT', '+INT']\n                : ['+INT', '-INT']\n              setSavingThrows(savingThrows.replace(oldInt, newInt))\n            }}\n          />\n          <Form.Switch\n            className='label'\n            type='switch'\n            name='wisdom'\n            label='wisdom'\n            checked={savingThrows.includes('+WIS')}\n            onChange={event => {\n              const [oldWis, newWis] = event.target.checked\n                ? ['-WIS', '+WIS']\n                : ['+WIS', '-WIS']\n              setSavingThrows(savingThrows.replace(oldWis, newWis))\n            }}\n          />\n          <Form.Switch\n            className='label'\n            type='switch'\n            name='charisma'\n            label='charisma'\n            checked={savingThrows.includes('+CHA')}\n            onChange={event => {\n              const [oldCha, newCha] = event.target.checked\n                ? ['-CHA', '+CHA']\n                : ['+CHA', '-CHA']\n              setSavingThrows(savingThrows.replace(oldCha, newCha))\n            }}\n          />\n          <Button className='start-btn' type='submit'>\n            Submit\n          </Button>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\nexport default CharacterEdit\n","import React from 'react'\n\nimport Form from 'react-bootstrap/Form'\n\nconst CharacterCreate = ({ character, setCharacter }) => {\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Character Information</h3>\n\n        <Form>\n          <Form.Group className='mb-3' controlId='name'>\n            <Form.Label className='label'>Name</Form.Label>\n            <Form.Control\n              type='name'\n              name='name'\n              placeholder='Character Name'\n              required\n              value={character.name}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  name: event.target.value\n                }))\n              }\n            />\n          </Form.Group>\n          <Form.Group className='mb-4' controlId='level'>\n            <Form.Label className='label'>Level</Form.Label>\n            <Form.Control\n              required\n              name='level'\n              type='level'\n              placeholder='Check with your DM what level you are starting at.'\n              value={character.level}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  level: event.target.value\n                }))\n              }\n            />\n          </Form.Group>\n          <Form.Group className='mb-4' controlId='exp'>\n            <Form.Label className='label'>Experience Points</Form.Label>\n            <Form.Control\n              required\n              name='exp'\n              type='exp'\n              placeholder='Check with your DM how much EXP you are starting at.'\n              value={character.exp}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  exp: event.target.value\n                }))\n              }\n            />\n          </Form.Group>\n          <Form.Control\n            aria-label='charClass'\n            as='select'\n            required\n            name='charClass'\n            type='charClass'\n            value={character.charClass}\n            onChange={event =>\n              setCharacter(character => ({\n                ...character,\n                charClass: event.target.value\n              }))\n            }\n          >\n            <option>Class ▿</option>\n            <option value='Artificer'>Artificer</option>\n            <option value='Barbarian'>Barbarian</option>\n            <option value='Bard'>Bard</option>\n            <option value='Blood Hunter'>Blood Hunter</option>\n            <option value='Cleric'>Cleric</option>\n            <option value='Druid'>Druid</option>\n            <option value='Fighter'>Fighter</option>\n            <option value='Monk'>Monk</option>\n            <option value='Paladin'>Paladin</option>\n            <option value='Ranger'>Ranger</option>\n            <option value='Rogue'>Rogue</option>\n            <option value='Sorcerer'>Sorcerer</option>\n            <option value='Warlock'>Warlock</option>\n            <option value='Wizard'>Wizard</option>\n          </Form.Control>\n          <Form.Control\n            aria-label='Race'\n            required\n            as='select'\n            name='race'\n            type='race'\n            value={character.race}\n            onChange={event =>\n              setCharacter(character => ({\n                ...character,\n                race: event.target.value\n              }))\n            }\n          >\n            <option>Race ▿</option>\n            <option value='Dragon Born'>Dragon Born</option>\n            <option value='Dwarf'>Dwarf</option>\n            <option value='Elf'>Elf</option>\n            <option value='Gnome'>Gnome</option>\n            <option value='Half Elf'>Half Elf</option>\n            <option value='Halfling'>Halfling</option>\n            <option value='Half-Orc'>Half-Orc</option>\n            <option value='Human'>Human</option>\n            <option value='Tiefling'>Tiefling</option>\n          </Form.Control>\n\n          <Form.Control\n            required\n            as='select'\n            name='alignment'\n            type='alignment'\n            aria-label='Alignment'\n            value={character.alignment}\n            onChange={event =>\n              setCharacter(character => ({\n                ...character,\n                alignment: event.target.value\n              }))\n            }\n          >\n            <option>Alignment ▿</option>\n            <option value='Lawful Good'>Lawful Good</option>\n            <option value='Neutral Good'>Neutral Good</option>\n            <option value='Chaotic Good'>Chaotic Good</option>\n            <option value='Lawful Neutral'>Lawful Neutral</option>\n            <option value='True Neutral'>True Neutral</option>\n            <option value='Chaotic Neutral'>Chaotic Neutral</option>\n            <option value='Lawful Evil'>Lawful Evil</option>\n            <option value='Neutral Evil'>Neutral EVil</option>\n            <option value='Chaotic Evil'>Chaotic Evil</option>\n            <option value='Unaligned'>Unaligned</option>\n          </Form.Control>\n          <Form.Group className='mb-4' controlId='background'>\n            <Form.Label className='label'>Background</Form.Label>\n            <Form.Control\n              required\n              name='background'\n              type='background'\n              placeholder='Gives you special bonuses based on your choice'\n              value={character.background}\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  background: event.target.value\n                }))\n              }\n            />\n          </Form.Group>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\nexport default CharacterCreate\n","import React from 'react'\n\nimport Form from 'react-bootstrap/Form'\n\nconst SpiCreate = ({ character, setCharacter, event }) => {\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Proficiency Bonus</h3>\n        <p>\n          Your character’s proficiency bonus is determined by their level. This\n          proficiency modifier increases by one at levels 5, 9, 13, and 17. You\n          add this bonus to any rolls for something that you have proficiency\n          in. That means saving throws, skill checks, weapon attacks, and using\n          tools that you are trained with.\n        </p>\n        <Form>\n          <Form.Group className='mb-4' controlId='prof'>\n            <Form.Label className='label'>Proficiency Bonus</Form.Label>\n            <Form.Control\n              value={character.prof}\n              name='prof'\n              type='prof'\n              placeholder='Proficiency Bonus'\n              onChange={event =>\n                setCharacter(character => ({\n                  ...character,\n                  prof: event.target.value\n                }))\n              }\n            />\n          </Form.Group>\n\n          <h3>Saving Throws</h3>\n          <p>\n            Saving throws are mostly the same as your ability modifiers, but two\n            of these will get a bonus based on what class you have chosen.\n          </p>\n\n          <Form.Label className='label'>Saving Throws (choose 2)</Form.Label>\n          <Form.Switch\n            className='label'\n            type='switch'\n            name='strength'\n            label='strength'\n            checked={character.savingThrows.includes('+STR')}\n            onChange={event => {\n              const [oldStr, newStr] = event.target.checked\n                ? ['-STR', '+STR']\n                : ['+STR', '-STR']\n              setCharacter(character => ({\n                ...character,\n                savingThrows: character.savingThrows.replace(oldStr, newStr)\n              }))\n            }}\n          />\n          <Form.Switch\n            className='label'\n            type='switch'\n            name='dexterity'\n            label='dexterity'\n            checked={character.savingThrows.includes('+DEX')}\n            onChange={event => {\n              const [oldDex, newDex] = event.target.checked\n                ? ['-DEX', '+DEX']\n                : ['+DEX', '-DEX']\n              setCharacter(character => ({\n                ...character,\n                savingThrows: character.savingThrows.replace(oldDex, newDex)\n              }))\n            }}\n          />\n          <Form.Switch\n            className = 'label'\n            type='switch'\n            name='constitution'\n            label='constitution'\n            checked={character.savingThrows.includes('+CON')}\n            onChange={event => {\n              const [oldCon, newCon] = event.target.checked\n                ? ['-CON', '+CON']\n                : ['+CON', '-CON']\n              setCharacter(character => ({\n                ...character,\n                savingThrows: character.savingThrows.replace(oldCon, newCon)\n              }))\n            }}\n          />\n          <Form.Switch\n            className = 'label'\n            type='switch'\n            name='intelligence'\n            label='intelligence'\n            checked={character.savingThrows.includes('+INT')}\n            onChange={event => {\n              const [oldInt, newInt] = event.target.checked\n                ? ['-INT', '+INT']\n                : ['+INT', '-INT']\n              setCharacter(character => ({\n                ...character,\n                savingThrows: character.savingThrows.replace(oldInt, newInt)\n              }))\n            }}\n          />\n          <Form.Switch\n            className = 'label'\n            type='switch'\n            name='wisdom'\n            label='wisdom'\n            checked={character.savingThrows.includes('+WIS')}\n            onChange={event => {\n              const [oldWis, newWis] = event.target.checked\n                ? ['-WIS', '+WIS']\n                : ['+WIS', '-WIS']\n              setCharacter(character => ({\n                ...character,\n                savingThrows: character.savingThrows.replace(oldWis, newWis)\n              }))\n            }}\n          />\n          <Form.Switch\n            className = 'label'\n            type='switch'\n            name='charisma'\n            label='charisma'\n            checked={character.savingThrows.includes('+CHA')}\n            onChange={event => {\n              const [oldCha, newCha] = event.target.checked\n                ? ['-CHA', '+CHA']\n                : ['+CHA', '-CHA']\n              setCharacter(character => ({\n                ...character,\n                savingThrows: character.savingThrows.replace(oldCha, newCha)\n              }))\n            }}\n          />\n        </Form>\n      </div>\n    </div>\n  )\n}\n\nexport default SpiCreate\n","import React, { useState } from 'react'\nimport CharacterCreate from './Character/CharacterCreate'\nimport AbilityCreate from './Character/AbilityScore'\nimport { Navigate } from 'react-router-dom'\nimport { createCharacter } from '../api/character'\nimport SpiCreate from './Character/SavingProfInsp'\n\nimport {\n  characterCreateSuccess,\n  characterCreateFailure\n} from './AutoDismissAlert/messages'\n\nconst CharForm = ({ user, setUser, msgAlert }) => {\n  const emptyCharacter = {\n    name: '',\n    level: '',\n    exp: '',\n    charClass: '',\n    race: '',\n    alignment: '',\n    background: '',\n    strength: '',\n    dexterity: '',\n    constitution: '',\n    intelligence: '',\n    wisdom: '',\n    charisma: '',\n    prof: '',\n    savingThrows: '-STR-DEX-CON-INT-WIS-CHA'\n    // skills: ''\n  }\n\n  const [page, setPage] = useState(0)\n  const [shouldNavigate, setShouldNavigate] = useState(false)\n  const [character, setCharacter] = useState(Object.assign({}, emptyCharacter))\n  if (!user) {\n    return <Navigate to='/' />\n  }\n\n  const onCharacterCreate = async () => {\n    try {\n      await createCharacter(user, character).then(res => {\n        user.character = res.data.character\n      })\n      msgAlert({\n        heading: 'Character Creation Success',\n        message: characterCreateSuccess,\n        variant: 'success'\n      })\n      setShouldNavigate(true)\n    } catch (error) {\n      msgAlert({\n        heading: 'Character Creation failed with error: ' + error.message,\n        message: characterCreateFailure,\n        variant: 'danger'\n      })\n      setCharacter(Object.assign({}, emptyCharacter))\n    }\n  }\n  if (shouldNavigate) {\n    return <Navigate to={'/characters'} />\n  }\n  const FormTitles = [\n    'Character Information',\n    'Ability Scores',\n    'Saving Throws & Proficiency'\n  ]\n\n  const PageDisplay = () => {\n    if (page === 0) {\n      return (\n        <CharacterCreate character={character} setCharacter={setCharacter} />\n      )\n    } else if (page === 1) {\n      return <AbilityCreate character={character} setCharacter={setCharacter} />\n    } else if (page === 2) {\n      return <SpiCreate character={character} setCharacter={setCharacter} />\n    } else {\n      return <h1>hi</h1>\n    }\n  }\n\n  return (\n    <div className='form'>\n      <div>\n        <div className='form-container'>\n          <div className='flex-container'>\n            <div className='header'>\n              <h1>{FormTitles[page]}</h1>;\n            </div>\n            <div className='dice20'>\n              <img className='dice' src={require('./img/d202.gif').default} />\n            </div>\n          </div>\n        </div>\n        <div className='body'>{PageDisplay()}</div>\n        <div className='footer'>\n          <button\n            className='start-btn'\n            disabled={page === 0}\n            onClick={() => {\n              setPage(currPage => currPage - 1)\n            }}\n          >\n            Prev\n          </button>\n          <button\n            className='start-btn'\n            onClick={async event => {\n              if (page === FormTitles.length - 1) {\n                await onCharacterCreate()\n              } else {\n                setPage(currPage => currPage + 1)\n              }\n            }}\n          >\n            {page === FormTitles.length - 1 ? 'Submit' : 'Next'}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CharForm\n","/* eslint-disable no-tabs */\nimport React, { useState } from 'react'\nimport { Route, Routes } from 'react-router-dom'\nimport { v4 as uuid } from 'uuid'\n\nimport AutoDismissAlert from './components/AutoDismissAlert/AutoDismissAlert'\nimport Header from './components/Header/Header'\nimport SignUp from './components/auth/SignUp'\nimport SignIn from './components/auth/SignIn'\nimport SignOut from './components/auth/SignOut'\nimport ChangePassword from './components/auth/ChangePassword'\nimport Home from './components/Home'\nimport AbilityCreate from './components/Character/AbilityScore'\nimport Character from './components/Character/Character'\nimport Characters from './components/Character/Characters'\n\nimport CharacterEdit from './components/Character/CharacterEdit'\nimport CharForm from './components/Form'\n\nconst App = () => {\n  const [user, setUser] = useState(null)\n  const [msgAlerts, setMsgAlerts] = useState([])\n\n  const clearUser = () => setUser(null)\n\n  const msgAlert = ({ heading, message, variant }) => {\n    const id = uuid()\n    setMsgAlerts(msgAlerts => [...msgAlerts, { heading, message, variant, id }])\n  }\n\n  return (\n    <>\n      <Header user={user} />\n      {msgAlerts.map(msgAlert => (\n        <AutoDismissAlert\n          key={msgAlert.id}\n          heading={msgAlert.heading}\n          variant={msgAlert.variant}\n          message={msgAlert.message}\n          id={msgAlert.id}\n        />\n      ))}\n      <main className='container'>\n        <Routes>\n          <Route\n            path='/sign-up'\n            element={<SignUp msgAlert={msgAlert} setUser={setUser} />}\n          />\n          <Route\n            path='/sign-in'\n            element={<SignIn msgAlert={msgAlert} setUser={setUser} />}\n          />\n          <Route\n            path='/sign-out'\n            element={\n              <SignOut msgAlert={msgAlert} clearUser={clearUser} user={user} />\n            }\n          />\n          <Route\n            path='/change-password'\n            element={<ChangePassword msgAlert={msgAlert} user={user} />}\n          />\n          <Route\n            path='/characters'\n            element={<Characters user={user} msgAlert={msgAlert} />}\n          />\n          <Route\n            path='/characters/:id'\n            element={<Character user={user} msgAlert={msgAlert} />}\n          />\n          <Route\n            path='/characters/:id/edit'\n            element={<CharacterEdit user={user} msgAlert={msgAlert} />}\n          />\n          <Route\n            path='/characters/create'\n            element={\n              <CharForm\n                user={user}\n                setUser={setUser}\n                msgAlert={msgAlert}\n              />\n            }\n          />\n          <Route\n            path='/characters/ability/:id'\n            element={\n              <AbilityCreate\n                user={user}\n                setUser={setUser}\n                msgAlert={msgAlert}\n              />\n            }\n          />\n          <Route path='/' element={<Home />} />\n        </Routes>\n      </main>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\n\nimport App from './App'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst appJsx = (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(appJsx, document.getElementById('root'))\n"],"sourceRoot":""}